
//Программа поиска всех простых цепей между двумя заданными вершинами (выполняется рекурсивно)
scp_program -> find_all_cycles (*

	-> rrel_params: ... (*
		//Узел графа
		-> rrel_1: rrel_in: _graph;;
		//Начальная вершина
		-> rrel_2: rrel_in: _beg_vertex;;
		//Конечная вершина
		-> rrel_3: rrel_in: _end_vertex;;
		//Простая цепь
		-> rrel_4: rrel_in: _simple_cycle;;
		//Множество всех непроверенных вершин
		-> rrel_5: rrel_in: _not_checked_vertexes;;
	*);;

	-> rrel_operators: ...(*

	//Проверка равества начальной вершины цикла и конечной
	//Если равны, то добавляем данный цикл в граф (делаем дополнительную проверку, чтобы длина цикла была больше 1)
	//Если не равны, то продолжаем поиск (переходим к оператору удаления начальной вершины из множества непроверенных вершин)	
	-> rrel_init: ..if_begin_equals_end (*
		<- ifCoin;;
		-> rrel_1: _beg_vertex;;
		-> rrel_2: _end_vertex;;
		=> nrel_then: ..call_LENGTH;;
		=> nrel_else: ..erase_begin_from_not_checked_vertexes;;	
	*);;

	//Вызов программы нахождения длины цепи
	//Переход к оператору ожидания завершения
	-> ..call_LENGTH (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: length;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//узел графа
			-> rrel_1: rrel_fixed: rrel_scp_var: _simple_cycle;;
			//Длина цикла
			-> rrel_2: rrel_assign: rrel_scp_var: _length;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr1;;
		=> nrel_goto: ..wait_after_LENGTH;;
	*);;

	//Оператор ожидания завершения программы length
	//К переходим к проверке переменной _length, которая хранит длину цепи
	-> ..wait_after_LENGTH (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr1;;
		=> nrel_goto: ..if_greater;;
	*);;

	//Если длина цепи больше 2, то добавляем цикл в граф
	//Если нет, то продолжаем поиск цикла
	-> ..if_greater (*
		<- ifGr;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _length;;
		-> rrel_2: rrel_fixed: rrel_scp_const: [2];;
		=> nrel_then: ..add_cycle_to_graph;;
		=> nrel_else: ..get_all_adjacent_vertices;;
	*);;
		
	//Добавление цепи к графу отношением rrel_ccycle
	//После этого выходим из программы
	-> ..add_cycle_to_graph (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _simple_cycle;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_cycle;;
		=> nrel_goto: ..return;;
	*);;

	//Удаление начальной вершины _begin из множества непроверенных вершин
	//Поиск 3-элементоной конструкции, содержащей начальную вершину
	//В процессе поиска ищем дугу (_deleted_arc)
	-> ..erase_begin_from_not_checked_vertexes (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _deleted_arc;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _beg_vertex;;
		=> nrel_goto: ..erase_begin_vertex;;
		=> nrel_else: ..return;;
	*);;

	//Удаление начальной вершины из множества непроверенных вершин путем удаления дуги, связывающей множество вершин и данную вершину (_deleted_arc)
	//После этого переходим к поиску всех смежных вершин
	-> ..erase_begin_vertex (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
		=> nrel_goto: ..get_all_adjacent_vertices;;	
	*);;

	//Добавление всех смежных начальной вершине begin вершин во множество смежных вершин _all_adjacent_vertices
	//При этом ищем вершины, идущие от _beg_vertex
	//Если множество найдено, то добавляем его элементы в _all_adjacent_vertices
	//Если смежные вершины не найдены, то выходим из программы
	-> ..get_all_adjacent_vertices (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _beg_vertex;;
		-> rrel_2: rrel_assign: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _adjacent_vertex;;
		-> rrel_4: rrel_assign: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_var: _graph;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _all_adjacent_vertices;;
		=> nrel_then: ..find_adjacent_vertex;;		
		=> nrel_else: ..return;;	
	*);;

	//--------------------------------------Начало цикла перебора смежных вершин--------------------------------------

	//Получение смежной вершины
	//Переход к дальнейшему поиску цикла
	//Если вершина не будет найдена выходим
	-> ..find_adjacent_vertex (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _all_adjacent_vertices;;
		-> rrel_2: rrel_assign: rrel_scp_var: _arc_adjacent_vertex;;
		-> rrel_3: rrel_assign: rrel_scp_var: _adjacent_vertex;;
		=> nrel_then: ..erase_adjacent_vertex_from_all_adjacent_vertices;; 
		=> nrel_else: ..return;;
	*);;

	//Удаление вершины из множества смежных вершин путем удаления дуги, связывающей множество вершин и данную вершину
	//Переход к оператору проверки на посещение вершины
	-> ..erase_adjacent_vertex_from_all_adjacent_vertices (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc_adjacent_vertex;;
		=> nrel_goto: ..if_vertex_not_checked;;
	*);;

	//Проверка на принадлежность смежной вершины множеству непроверенных вершин (проходили ли мы уже через эту вершину)
	//Если проходили, переходим к следующей вершине (вершина не найдена во множестве _not_checked_vertexes)
	//Сделаем также проверку на прохождение дуги между начальной вершиной и смежной
	//Если не проходили, то добавляем эту вершину в _copy_cycle, которая является копией simple_cycle (вершина найдена во множестве _not_checked_vertexes)
	-> ..if_vertex_not_checked (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_between_not_checked_vertexes_and_adjacent_vertex;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		=> nrel_then: ..find_set_vertices;;
		=> nrel_else: ..find_adjacent_vertex;; 
	*);;

	//Ищем смежную вершину в цикле
	//Если она не найдена, то продолжаем поиск цикла
	//Если она найдена, то берем следующую смежную вершину
	//В процессе проверки начальную вершину цикла мы не учитываем
	-> ..find_set_vertices (*
		<- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _simple_cycle;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_element;;
		=> nrel_then: ..find_adjacent_vertex;;
		=> nrel_else: ..create_copy_cycle;;
	*);;

	//Оператор генерации простого цикла (является копией _simple_cycle)
	//После генерации узла, переходим к копированию цепи
	-> ..create_copy_cycle (*
		<- genEl;;
		-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _copy_cycle;;
		=> nrel_goto: ..call_COPY_CYCLE;;
	*);;

	//Вызов программы копирования всех вершин из одной цепи в другую
	-> ..call_COPY_CYCLE (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: copy_cycle;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//Цикл, из которого копируют вершины
			-> rrel_1: rrel_fixed: rrel_scp_var: _simple_cycle;;
			//Цикл, в который копируют вершины
			-> rrel_2: rrel_fixed: rrel_scp_var: _copy_cycle;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr0;;
		=> nrel_goto: ..wait_after_COPY_CYCLE;;
	*);;

	//Ожидание завершения программы копирования цикла
	-> ..wait_after_COPY_CYCLE (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr0;;
		=> nrel_goto: ..add_adjacent_vertex;;
	*);;

	//Оператор добавления смежной вершины в скопированный цикл
	-> ..add_adjacent_vertex (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _copy_cycle;;
		-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_element;;
		=> nrel_goto: ..call_recursive;;
	*);;

	//Рекурсивный вызов программы нахождения всех цепей (в качестве начальной вершины у нас будет смежная вершина _adjacent_vertex)
	-> ..call_recursive (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: find_all_cycles;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//Узел графа
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			//Начальная вершина
			-> rrel_2: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
			//Конечная вершина
			-> rrel_3: rrel_fixed: rrel_scp_var: _end_vertex;;
			//Простая цепь
			-> rrel_4: rrel_fixed: rrel_scp_var: _copy_cycle;;
			//Множество непроверенных вершин
			-> rrel_5: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
		=> nrel_goto: ..wait_after_RECURSIVE;;
	*);;

	//Ожидание завершения рекурсивного вызова
	//Переход к добавлению дуги между множеством непроверенных вершин и смежной вершиной (так как через эту смежную вершину могут лежать другие цепи)
	-> ..wait_after_RECURSIVE (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;
		=> nrel_goto: ..create_arc_between_adjacent_vertex_and_not_checked_vertexes;;
	*);;
	
	//Оператор создания дуги
	//Переход к получению новой смежной вершины
	-> ..create_arc_between_adjacent_vertex_and_not_checked_vertexes (*
		<- genElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
		-> rrel_2: rrel_assign: rrel_scp_var: _arc_adjacent_vertex;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _adjacent_vertex;;
		=> nrel_goto: ..find_adjacent_vertex;;
	*);;
	
	//Оператор return
	-> ..return (*
		<- return;;
	*);;
		
	*);;
*);;