
//Программа вычисления длины цикла
scp_program -> length (*	
	-> rrel_params: ... (*
		//Цикл, длину которого нужно найти
		-> rrel_1: rrel_in: _cycle;;
		//Длина найденного цикла
		-> rrel_2: rrel_out: _length_value;;
	*);;

	-> rrel_operators: ... (*

		//Инициализация переменной _length_value, которая хранит длину цикла (_length_value = 0)
		//Переход к оператору получения начальной вершины
		-> rrel_init: ..initialize (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _length_value;;
			-> rrel_2: rrel_fixed: rrel_scp_const: [0];;
			=> nrel_goto: ..find_set_vertices;;
		*);;

		//Нахождение множества элементов цикла
		//Переход к перебору этих вершин
		//Если элементы не найдены, то выходим из программы
		//(начальную вершина не содержится в данном множетсве)
		->  ..find_set_vertices (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _cycle;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc1;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_element;;
			->rrel_set_3: rrel_assign: rrel_scp_var: _vertices;;
			=> nrel_then: ..get_element;;
			=> nrel_else: ..operator_return;;
		*);;

		//Получение элемента цикла
		//Если вершина найдена, то переходим к суммированию
		//Если она не найдена, то очищаем память и выходим из программы
		-> ..get_element (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertices;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc_vertex;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex;;
			=> nrel_then: ..erase_arc_vertex;; 
			=> nrel_else: ..erase_vertices;;
		*);;

		//Удаление дуги, между вершиной цикла и множеством всех вершин
		-> ..erase_arc_vertex (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc_vertex;;
			=> nrel_goto: ..temp;;
		*);;

		//Создание временной переменной, которая равна длине цикла (необходима в процессе вычисления длины цикла)
		//Переход к суммированию
		-> ..temp (*
			<- varAssign;;
			-> rrel_1: rrel_assign: rrel_scp_var: _temp;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _length_value;;
			=> nrel_goto: ..sum;;
		*);;

		//Оператор сложения (_length_value = _temp + 1)
		//Переход к получению новой вершины
		-> ..sum (*
			<- contAdd;;
			-> rrel_1: rrel_assign: rrel_scp_var: _length_value;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _temp;;
			-> rrel_3: rrel_fixed: rrel_scp_const: [1];;
			=> nrel_goto: ..get_element;;
		*);;

		-> ..erase_vertices (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _vertices;;
			=> nrel_goto: ..operator_return;;
		*);;

		//Оператор operator_return
		-> ..operator_return (*
			<- return;;
		*);;

	*);;
*);;