
scp_program -> is_hamilton (*
	
	-> rrel_params: ... (*

		//Узел, содержащий исходный граф
		-> rrel_1: rrel_in: _graph;;

		//Номер теста (sc-ссылка)
		-> rrel_2: rrel_in: _test_number;;

	*);;

	-> rrel_operators: ... (*

	//Начальный оператор (выводит строку "Тест " )
	//Переход к оператору вывода номера теста
	-> rrel_init: ..start (*
		<- print;;
		-> rrel_1: rrel_fixed: rrel_scp_const: [Тест ];; 		
		=> nrel_goto: ..print_test_numbers;;	
	*);;

	//Оператор вывода номера теста
	//Переход к оператору вызова программы, которая проверяет граф на связность
	-> ..print_test_numbers (*
		<- printNl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _test_number;; 		
		=> nrel_goto: ..get_all_vertices;;	
	*);;

	//Оператор поиска всех вершин (данные вершины будут началом и концом всех циклов)
	//В случае, если не будет найдено ни одной вершины, выходим из программы (может произойти в случае, если граф не имеет вершин)
	//Если найдено множество, то переходим к следующему пункту (получение вершины)
	-> ..get_all_vertices (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _vertex_of_graph;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _vertices;;
		=> nrel_then: ....get_all_arcs;;		
		=> nrel_else: ..print_graph_is_not_hamilton;;	
	*);;

	-> ..get_all_arcs (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _vertex_of_graph;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_edge;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _arcs;;
		=> nrel_then: ..get_arc;;		
		=> nrel_else: ..print_graph_is_not_hamilton;;	
	*);;


	//Перед выходом из программы напишем, что граф не является гамильтоновым
	-> ..print_graph_is_not_hamilton (*
		<- printNl;;
		-> rrel_1: rrel_fixed: rrel_scp_const: [Граф не является гамильтоновым];; 		
		=> nrel_goto: ..return;;	
	*);;	

	//Оператор получения вершины _vertex
	//Если найдена вершина переходим к поиску всех циклов, началом и концом которой является _vertex
	//При этом удалим вершину _vertex из множества _vertices
	//Если не будет найдено начальной вершины, то очищаем память и продолжаем выполнение алгоритма (все вершины перебраны)
	-> ..get_vertex (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _vertices;;
		-> rrel_2: rrel_assign: rrel_scp_var: _deleted_arc;;
		-> rrel_3: rrel_assign: rrel_scp_var: _vertex;;
		=> nrel_then: ..delete_vertex;;
		=> nrel_else: ..erase_vertices;;
	*);;
	-> ..get_arc (*
		<- searchElStr3;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _arcs;;
		-> rrel_2: rrel_assign: rrel_scp_var: _deleted_vertex;;
		-> rrel_3: rrel_assign: rrel_scp_var: _arc;;
		=> nrel_then: ..delete_arc;;
		=> nrel_else: ..erase_arcs;;
	*);;

	//Удаление _vertex из множества всех вершин путем удаления дуги, связывающей множество вершин и данную вершину (_deleted_arc)
	//После этого переходим к поиску циклов
	-> ..delete_vertex (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_arc;;
		=> nrel_goto: ..create_set_not_checked_vertices;;	
	*);;
	-> ..delete_arc (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _deleted_vertex;;
		=> nrel_goto: ..create_set_not_checked_arcs;;	
	*);;

	//Оператор создания множества всех непроверенных вершин (непроверенными вершинами будут считаться все вершины графа)
	//Если такое множество создано, то переходим к созданию простого цикла, в которую занесем начальную вершину
	//Условие, когда не будет создано множество непроверенных вершин, невыполнимо
	-> ..create_set_not_checked_vertices (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _vertex_of_graph;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _not_checked_vertices;;
		=> nrel_then: ..create_simple_cycle;;
		=> nrel_else: ..return;;	
	*);;

-> ..create_set_not_checked_arcs (*
		 <- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_assign: rrel_scp_var: _vertex_of_graph;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_edge;;
		->rrel_set_3: rrel_assign: rrel_scp_var: _not_checked_arcs;;
		=> nrel_then: ..create_simple_cycle;;
		=> nrel_else: ..return;;	
	*);;
	//Оператор генерации простого цикла
	//После генерации узла, переходим к добавлению начальной вершины
	-> ..create_simple_cycle (*
		<- genEl;;
		-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _simple_cycle;;
		=> nrel_goto: ..add_first_vertex;;
	*);;

	//Оператор добавления начальной вершины в созданный цикл
	//После этого переходим к вызову программы find_all_cycles
	-> ..add_first_vertex (*
		<- genElStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _simple_cycle;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
		-> rrel_3: rrel_fixed: rrel_scp_var: _vertex;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_begin;;
		=> nrel_goto: ..call_FIND_ALL_CYCLES;;
	*);;

	//Оператор вызова программы proc_find_all_chains, которая ищет все простые цепи между вершинами _begin_vertex и _end_vertex
	//После этого переходим к оператору ожидания
	-> ..call_FIND_ALL_CYCLES (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: find_all_cycles;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//узел графа
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			//Начальная вершина
			-> rrel_2: rrel_fixed: rrel_scp_var: _vertex;;
			//Конечная вершина
			-> rrel_3: rrel_fixed: rrel_scp_var: _vertex;;
			//Простая цепь
			-> rrel_4: rrel_fixed: rrel_scp_var: _simple_cycle;;
			//Множество непроверенных вершин
			-> rrel_5: rrel_fixed: rrel_scp_var: _not_checked_vertices;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr2;;
		=> nrel_goto: ..wait_after_find_all_cycles;;
	*);;

	//Оператор ожидания завершения программы proc_find_all_chains
	//После этого очистим память и перейдем к нахождению другой вершины
	-> ..wait_after_find_all_cycles (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr2;;
		=> nrel_goto: ..erase_not_checked_vertices;;
	*);;

	//Удаление множества всех непроверенных вершин
	//Переход к оператору нахождения следующей конечной вершины
	-> ..erase_not_checked_vertices (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _not_checked_vertices;;
		=> nrel_goto: ..get_vertex;;
	*);;

	//--------------------------------------Ветвь else (если кончились все вершины множества _vertices)----------------------------------------

	//Удаление множества всех вершин
	//Переход к программе удаления циклов, проходящих через одни и те же вершины
	-> ..erase_vertices (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _vertices;;
		=> nrel_goto: ..call_CHECK;; 
	*);;
	-> ..erase_arcs (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arcs;;
		=> nrel_goto: ..call_CHECK;; 
	*);;


	//Оператор вызова check
	//Вызванная программа проверяет на наличие гамильтонова цикла
	-> ..call_CHECK (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: check;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//Узел графа
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			//Переменная, которая хранит резульат проверки циклов (1 - граф является гамильтоновым, 0 - граф не является гамильтоновым)
			-> rrel_2: rrel_assign: rrel_scp_var: _result;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr3;;
		=> nrel_goto: ..wait_after_CHECK;;
	*);;

	//Оператор ожидания завершения программы check
	//После этого переходим к оператору очистки памяти
	-> ..wait_after_CHECK (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr3;;
		=> nrel_goto: ..call_CLEAR;;
	*);;

	//Оператор вызова clear
	//Вызванная программа очищает память от созданных цепей
	//После этого переходим к оператору ожидания завершения программы
	-> ..call_CLEAR (*
		<- call;;
		-> rrel_1: rrel_fixed: rrel_scp_const: clear;;
		-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
			//Узел графа
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		*);;
		-> rrel_3: rrel_assign: rrel_scp_var: _descr4;;
		=> nrel_goto: ..wait_clear;;
	*);;

	//Оператор ожидания завершения программы clear
	//После этого переходим к оператору вызова программы очистки памяти
	-> ..wait_clear (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr4;;
		=> nrel_goto: ..if_hamilton;;
	*);;

	//Если _result == 1, значит, граф является гамильтоновым => вывод "Граф гамильтонов"
	//Если _result != 1, значит, граф не является гамильтоновым => вывод "Граф не гамильтонов"
	-> ..if_hamilton (*
		<- ifEq;;
		-> rrel_1: rrel_fixed: rrel_scp_const: [1];;
		-> rrel_2: rrel_fixed: rrel_scp_var: _result;;
		=> nrel_then: ..print_graph_is_hamilton;;
		=> nrel_else: ..print_graph_is_not_hamilton;;
	*);;

	//Перед выходом из программы напишем, что граф гамильтонов
	-> ..print_graph_is_hamilton (*
		<- printNl;;
		-> rrel_1: rrel_fixed: rrel_scp_const: [Граф является гамильтоновым];; 		
		=> nrel_goto: ..return;;	
	*);;

	//Оператор return
	-> ..return (*
		<- return;;
	*);;

	*);;
*);;	